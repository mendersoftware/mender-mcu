# @file      CMakeLists.txt
# @brief     mender-mcu-client static library CMakeLists file
#
# Copyright joelguittet and mender-mcu-client contributors
# Copyright Northern.tech AS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.16.3)

# Set MENDER_MCU_ROOT
get_filename_component(MENDER_MCU_ROOT ${CMAKE_CURRENT_LIST_DIR}/..  ABSOLUTE)
message(STATUS "mender-mcu root is ${MENDER_MCU_ROOT}")

# Library options
if (NOT CONFIG_MENDER_SERVER_HOST)
    message(STATUS "Using default server host")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_SERVER_HOST}' server host")
endif()
if (NOT CONFIG_MENDER_SERVER_TENANT_TOKEN)
    message(STATUS "Using default server tenant token")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_SERVER_TENANT_TOKEN}' server tenant token")
endif()
if (NOT CONFIG_MENDER_DEVICE_TYPE)
    message(STATUS "Using default device type")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_DEVICE_TYPE}' device type")
endif()
if (NOT CONFIG_MENDER_CLIENT_AUTHENTICATION_POLL_INTERVAL)
    message(STATUS "Using default authentication poll interval")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_CLIENT_AUTHENTICATION_POLL_INTERVAL}' authentication poll interval")
endif()
if (NOT CONFIG_MENDER_CLIENT_UPDATE_POLL_INTERVAL)
    message(STATUS "Using default update poll interval")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_CLIENT_UPDATE_POLL_INTERVAL}' update poll interval")
endif()
if (CONFIG_MENDER_CLIENT_INVENTORY)
    message(STATUS "Using mender-inventory")
    if (NOT CONFIG_MENDER_CLIENT_INVENTORY_REFRESH_INTERVAL)
        message(STATUS "Using default inventory refresh interval")
    else()
        message(STATUS "Using custom '${CONFIG_MENDER_CLIENT_INVENTORY_REFRESH_INTERVAL}' inventory refresh interval")
    endif()
  endif()
if (CONFIG_MENDER_ZEPHYR_IMAGE_UPDATE_MODULE)
  message(STATUS "Using the default zephyr-image update module")
endif()
if (NOT CONFIG_MENDER_LOG_LEVEL)
    message(STATUS "Using default log level")
elseif (CONFIG_MENDER_LOG_LEVEL STREQUAL "off")
    message(STATUS "Using log level 'off'")
    set(CONFIG_MENDER_LOG_LEVEL MENDER_LOG_LEVEL_OFF)
elseif (CONFIG_MENDER_LOG_LEVEL STREQUAL "error")
    message(STATUS "Using log level 'error'")
    set(CONFIG_MENDER_LOG_LEVEL MENDER_LOG_LEVEL_ERR)
elseif (CONFIG_MENDER_LOG_LEVEL STREQUAL "warning")
    message(STATUS "Using log level 'warning'")
    set(CONFIG_MENDER_LOG_LEVEL MENDER_LOG_LEVEL_WRN)
elseif (CONFIG_MENDER_LOG_LEVEL STREQUAL "info")
    message(STATUS "Using log level 'info'")
    set(CONFIG_MENDER_LOG_LEVEL MENDER_LOG_LEVEL_INF)
elseif (CONFIG_MENDER_LOG_LEVEL STREQUAL "debug")
    message(STATUS "Using log level 'debug'")
    set(CONFIG_MENDER_LOG_LEVEL MENDER_LOG_LEVEL_DBG)
elseif (CONFIG_MENDER_LOG_LEVEL MATCHES "^[0-4]$")
    # See zephyr/subsys/logging/Kconfig.template.log_config
    message(STATUS "Using numeric log level '${CONFIG_MENDER_LOG_LEVEL}'")
else()
    message(FATAL_ERROR "Invalid log level '${CONFIG_MENDER_LOG_LEVEL}'")
endif()
if (NOT CONFIG_MENDER_PLATFORM_FLASH_TYPE)
    message(STATUS "Using default 'generic/weak' platform flash implementation")
    set(CONFIG_MENDER_PLATFORM_FLASH_TYPE "generic/weak")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_PLATFORM_FLASH_TYPE}' platform flash implementation")
endif()
if (NOT CONFIG_MENDER_PLATFORM_LOG_TYPE)
    message(STATUS "Using default 'generic/weak' platform log implementation")
    set(CONFIG_MENDER_PLATFORM_LOG_TYPE "generic/weak")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_PLATFORM_LOG_TYPE}' platform log implementation")
endif()
if (NOT CONFIG_MENDER_PLATFORM_NET_TYPE)
    message(STATUS "Using default 'generic/weak' platform network implementation")
    set(CONFIG_MENDER_PLATFORM_NET_TYPE "generic/weak")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_PLATFORM_NET_TYPE}' platform network implementation")
endif()
if (NOT CONFIG_MENDER_PLATFORM_SCHEDULER_TYPE)
    message(STATUS "Using default 'generic/weak' platform scheduler implementation")
    set(CONFIG_MENDER_PLATFORM_SCHEDULER_TYPE "generic/weak")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_PLATFORM_SCHEDULER_TYPE}' platform scheduler implementation")
endif()
if (NOT CONFIG_MENDER_PLATFORM_STORAGE_TYPE)
    message(STATUS "Using default 'generic/weak' platform storage implementation")
    set(CONFIG_MENDER_PLATFORM_STORAGE_TYPE "generic/weak")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_PLATFORM_STORAGE_TYPE}' platform storage implementation")
endif()
if (NOT CONFIG_MENDER_PLATFORM_TLS_TYPE)
    message(STATUS "Using default 'generic/weak' platform TLS implementation")
    set(CONFIG_MENDER_PLATFORM_TLS_TYPE "generic/weak")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_PLATFORM_TLS_TYPE}' platform TLS implementation")
endif()
if (NOT CONFIG_MENDER_PLATFORM_SHA_TYPE)
    message(STATUS "Using default 'generic/weak' platform SHA implementation")
    set(CONFIG_MENDER_PLATFORM_SHA_TYPE "generic/weak")
else()
    message(STATUS "Using custom '${CONFIG_MENDER_PLATFORM_SHA_TYPE}' platform SHA implementation")
endif()

# Set MENDER_MCU_SOURCES
file(GLOB MENDER_MCU_SOURCES
    "${MENDER_MCU_ROOT}/core/src/mender-api.c"
    "${MENDER_MCU_ROOT}/core/src/mender-artifact.c"
    "${MENDER_MCU_ROOT}/core/src/mender-artifact-download.c"
    "${MENDER_MCU_ROOT}/core/src/mender-client.c"
    "${MENDER_MCU_ROOT}/core/src/mender-update-module.c"
    "${MENDER_MCU_ROOT}/core/src/mender-utils.c"
    "${MENDER_MCU_ROOT}/core/src/mender-deployment-data.c"
    "${MENDER_MCU_ROOT}/platform/log/${CONFIG_MENDER_PLATFORM_LOG_TYPE}/src/mender-log.c"
    "${MENDER_MCU_ROOT}/platform/net/${CONFIG_MENDER_PLATFORM_NET_TYPE}/src/mender-http.c"
    "${MENDER_MCU_ROOT}/platform/scheduler/${CONFIG_MENDER_PLATFORM_SCHEDULER_TYPE}/src/mender-scheduler.c"
    "${MENDER_MCU_ROOT}/platform/storage/${CONFIG_MENDER_PLATFORM_STORAGE_TYPE}/src/mender-storage.c"
    "${MENDER_MCU_ROOT}/platform/tls/${CONFIG_MENDER_PLATFORM_TLS_TYPE}/src/mender-tls.c"
    "${MENDER_MCU_ROOT}/platform/sha/${CONFIG_MENDER_PLATFORM_SHA_TYPE}/src/mender-sha.c"
)
if (CONFIG_MENDER_CLIENT_INVENTORY)
    list(APPEND MENDER_MCU_SOURCES
        "${MENDER_MCU_ROOT}/core/src/mender-inventory.c"
    )
endif()
if (CONFIG_MENDER_ZEPHYR_IMAGE_UPDATE_MODULE)
    list(APPEND MENDER_MCU_SOURCES
        "${MENDER_MCU_ROOT}/core/src/mender-zephyr-image-update-module.c"
        "${MENDER_MCU_ROOT}/platform/flash/${CONFIG_MENDER_PLATFORM_FLASH_TYPE}/src/mender-flash.c"
    )
endif()
if (CONFIG_MENDER_PLATFORM_NET_TYPE STREQUAL "zephyr")
    list(APPEND MENDER_MCU_SOURCES
        "${MENDER_MCU_ROOT}/platform/net/${CONFIG_MENDER_PLATFORM_NET_TYPE}/src/mender-net.c"
    )
endif()

# Set MENDER_MCU_INCLUDE
set(MENDER_MCU_INCLUDE ${MENDER_MCU_ROOT}/include)

# Set MENDER_MCU_VERSION_FILE
set(MENDER_MCU_VERSION_FILE ${MENDER_MCU_ROOT}/VERSION)

message(STATUS "mender-mcu version file is ${MENDER_MCU_VERSION_FILE}")
